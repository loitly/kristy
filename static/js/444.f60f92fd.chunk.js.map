{"version":3,"file":"static/js/444.f60f92fd.chunk.js","mappings":"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","sources":["common/utils/useForm.tsx","common/utils/validationRules.ts","components/Block/styles.ts","components/Block/index.tsx","components/ContactForm/styles.ts","components/ContactForm/index.tsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport { notification } from \"antd\";\r\n\r\ninterface IValues {\r\n  name: string;\r\n  email: string;\r\n  message: string;\r\n}\r\n\r\nconst initialValues: IValues = {\r\n  name: \"\",\r\n  email: \"\",\r\n  message: \"\",\r\n};\r\n\r\nexport const useForm = (validate: { (values: IValues): IValues }) => {\r\n  const [formState, setFormState] = useState<{\r\n    values: IValues;\r\n    errors: IValues;\r\n  }>({\r\n    values: { ...initialValues },\r\n    errors: { ...initialValues },\r\n  });\r\n\r\n  const handleSubmit = async (event: React.ChangeEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    const values = formState.values;\r\n    const errors = validate(values);\r\n    setFormState((prevState) => ({ ...prevState, errors }));\r\n\r\n    const url = \"\"; // Fill in your API URL here\r\n\r\n    try {\r\n      if (Object.values(errors).every((error) => error === \"\")) {\r\n        const response = await fetch(url, {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify(values),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          notification[\"error\"]({\r\n            message: \"Error\",\r\n            description:\r\n              \"There was an error sending your message, please try again later.\",\r\n          });\r\n        } else {\r\n          event.target.reset();\r\n          setFormState(() => ({\r\n            values: { ...initialValues },\r\n            errors: { ...initialValues },\r\n          }));\r\n\r\n          notification[\"success\"]({\r\n            message: \"Success\",\r\n            description: \"Your message has been sent!\",\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      notification[\"error\"]({\r\n        message: \"Error\",\r\n        description: \"Failed to submit form. Please try again later.\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleChange = (\r\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ) => {\r\n    event.persist();\r\n    const { name, value } = event.target;\r\n    setFormState((prevState) => ({\r\n      ...prevState,\r\n      values: {\r\n        ...prevState.values,\r\n        [name]: value,\r\n      },\r\n      errors: {\r\n        ...prevState.errors,\r\n        [name]: \"\",\r\n      },\r\n    }));\r\n  };\r\n\r\n  return {\r\n    handleChange,\r\n    handleSubmit,\r\n    values: formState.values,\r\n    errors: formState.errors,\r\n  };\r\n};\r\n","import { validateProps } from \"../../common/types\";\r\n\r\nexport default function validate(values: validateProps) {\r\n  let errors = {} as validateProps;\r\n\r\n  if (!values.name) {\r\n    errors.name = \"Name is required\";\r\n  }\r\n  if (!values.email) {\r\n    errors.email = \"Email address is required\";\r\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\r\n    errors.email = \"Email address is invalid\";\r\n  }\r\n  if (!values.message) {\r\n    errors.message = \"Message is required\";\r\n  }\r\n  return errors;\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const Content = styled(\"p\")`\r\n  margin-top: 1.5rem;\r\n`;\r\n\r\nexport const Container = styled(\"div\")`\r\n  position: relative;\r\n  max-width: 700px;\r\n`;\r\n\r\nexport const TextWrapper = styled(\"div\")`\r\n  border-radius: 3rem;\r\n  max-width: 400px;\r\n`;\r\n","import { withTranslation, TFunction } from \"react-i18next\";\r\nimport { Container, TextWrapper, Content } from \"./styles\";\r\n\r\ninterface Props {\r\n  title: string;\r\n  content: string;\r\n  t: TFunction;\r\n}\r\n\r\nconst Block = ({ title, content, t }: Props) => {\r\n  return (\r\n    <Container>\r\n      <h6>{t(title)}</h6>\r\n      <TextWrapper>\r\n        <Content>{t(content)}</Content>\r\n      </TextWrapper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Block);\r\n","import styled from \"styled-components\";\r\n\r\nexport const ContactContainer = styled(\"div\")`\r\n  padding: 5rem 0;\r\n\r\n  @media only screen and (max-width: 1024px) {\r\n    padding: 3rem 0;\r\n  }\r\n`;\r\n\r\nexport const FormGroup = styled(\"form\")`\r\n  width: 100%;\r\n  max-width: 520px;\r\n\r\n  @media only screen and (max-width: 1045px) {\r\n    max-width: 100%;\r\n    margin-top: 2rem;\r\n  }\r\n`;\r\n\r\nexport const Span = styled(\"span\")`\r\n  display: block;\r\n  font-weight: 600;\r\n  color: rgb(255, 130, 92);\r\n  height: 0.775rem;\r\n  padding: 0 0.675rem;\r\n`;\r\n\r\nexport const ButtonContainer = styled(\"div\")`\r\n  text-align: end;\r\n  position: relative;\r\n\r\n  @media only screen and (max-width: 414px) {\r\n    padding-top: 0.75rem;\r\n  }\r\n`;\r\n","import { Row, Col } from \"antd\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport { Slide } from \"react-awesome-reveal\";\r\nimport { ContactProps, ValidationTypeProps } from \"./types\";\r\nimport { useForm } from \"../../common/utils/useForm\";\r\nimport validate from \"../../common/utils/validationRules\";\r\nimport Block from \"../Block\";\r\nimport { ContactContainer, FormGroup, Span, ButtonContainer } from \"./styles\";\r\n\r\nconst Contact = ({ title, content, id, t }: ContactProps) => {\r\n  const { values, errors, handleChange, handleSubmit } = useForm(validate);\r\n\r\n  const ValidationType = ({ type }: ValidationTypeProps) => {\r\n    const ErrorMessage = errors[type as keyof typeof errors];\r\n    return <Span>{ErrorMessage}</Span>;\r\n  };\r\n\r\n  return (\r\n    <ContactContainer id={id}>\r\n      <Row justify=\"space-between\" align=\"middle\">\r\n        <Col lg={12} md={11} sm={24} xs={24}>\r\n          <Slide direction=\"left\" triggerOnce>\r\n            <Block title={title} content={content}/>\r\n              <a className=\"contact-detail-email\" href={\"mailto:kristytma@yahoo.com\"}>\r\n                <img src={'/kristy/img/svg/gmail.svg'} width='40px' height='40px'/>\r\n              </a>\r\n          </Slide>\r\n        </Col>\r\n      </Row>\r\n    </ContactContainer>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Contact);\r\n"],"names":["initialValues","name","email","message","validate","values","errors","test","Content","styled","_templateObject","_taggedTemplateLiteral","Container","_templateObject2","TextWrapper","_templateObject3","withTranslation","_ref","title","content","t","_jsxs","children","_jsx","ContactContainer","_templateObject4","id","_useForm","_useState","useState","_objectSpread","_useState2","_slicedToArray","formState","setFormState","handleSubmit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","event","wrap","_context","prev","next","preventDefault","prevState","Object","every","error","fetch","method","headers","body","JSON","stringify","sent","ok","target","reset","notification","description","t0","stop","_x","apply","arguments","handleChange","persist","_event$target","value","_defineProperty","useForm","Row","justify","align","Col","lg","md","sm","xs","Slide","direction","triggerOnce","Block","className","href","src","width","height"],"sourceRoot":""}